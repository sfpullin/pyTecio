#include "ThirdPartyHeadersBegin.h"
#include <boost/assign.hpp>
#include <boost/scoped_ptr.hpp>
#include <boost/unordered_map.hpp>
#include <cstdio>
#include <mpi.h>
#include <string>
#include "ThirdPartyHeadersEnd.h"
#include "MPIFileReader.h"
namespace tecplot { namespace teciompi { MPIFileReader::MPIFileReader(std::string const& ___1392, MPI_Comm comm) : m_ioStream(___1392, comm) {} MPIFileReader::~MPIFileReader() {} ___372 MPIFileReader::___2039() const { return m_ioStream.fileHandle() != NULL; } ___372 MPIFileReader::close(bool ___3359) { ___372 ___3356 = ___4224; if (___2039()) ___3356 = m_ioStream.close(___3359); ENSURE(!___2039()); ENSURE(VALID_BOOLEAN(___3356)); return ___3356; } ___3931::___1391 MPIFileReader::fileLoc() { REQUIRE(___2039()); return static_cast<___3931::___1391>(m_ioStream.fileLoc()); } ___372 MPIFileReader::___3458() { REQUIRE(___2039()); return m_ioStream.___3458(); } ___372 MPIFileReader::___3457(___3931::___1391 fileLoc) { REQUIRE(___2039()); return m_ioStream.___3457(fileLoc); } ___372 MPIFileReader::seekToFileEnd() { REQUIRE(___2039()); return m_ioStream.seekToFileEnd(); } std::string const& MPIFileReader::___1392() const { return m_ioStream.___1392(); } void MPIFileReader::___3492(___372 ___2000) { REQUIRE(VALID_BOOLEAN(___2000)); m_ioStream.___3492(___2000); } ___372 MPIFileReader::___2000() const { return m_ioStream.___2000(); } void MPIFileReader::setDataFileType(DataFileType_e ___842) { REQUIRE(VALID_ENUM(___842, DataFileType_e)); m_ioStream.setDataFileType(___842); } DataFileType_e MPIFileReader::___842() const { return m_ioStream.___842(); } ___3931::FileIOStatistics& MPIFileReader::statistics() { return m_ioStream.statistics(); } ___372 MPIFileReader::open() { REQUIRE(!___2039()); return m_ioStream.open(MPI_MODE_RDONLY); } namespace { MPI_Datatype mpiDatatypeForSize(size_t size) { static boost::unordered_map<size_t, MPI_Datatype> typeForSize = boost::assign::map_list_of<size_t, MPI_Datatype> (1, static_cast<MPI_Datatype>(MPI_CHAR)) (2, static_cast<MPI_Datatype>(MPI_SHORT)) (4, static_cast<MPI_Datatype>(MPI_INT)) (8, static_cast<MPI_Datatype>(MPI_DOUBLE)); REQUIRE(typeForSize.find(size) != typeForSize.end()); return typeForSize[size]; } } size_t MPIFileReader::fread(void* ___416, size_t size, size_t count) { REQUIRE(___2039()); int countRead = 0; MPI_Datatype ___904 = mpiDatatypeForSize(size); MPI_Status status; if (MPI_File_read(m_ioStream.fileHandle(), ___416, static_cast<int>(count), ___904, &status) == MPI_SUCCESS) MPI_Get_count(&status, ___904, &countRead); return static_cast<size_t>(countRead); } char* MPIFileReader::fgets(char* s, int size) { REQUIRE(___2039()); REQUIRE(size > 1); MPI_Status status; for (int n = 0; n < size - 1; ++n) { if (MPI_File_read(m_ioStream.fileHandle(), &s[n], 1, MPI_CHAR, &status) != MPI_SUCCESS) { s[n] = '\0'; break; } else if (s[n] == '\n') { s[n + 1] = '\0'; break; } } s[size - 1] = '\0'; return s; } int MPIFileReader::feof() { REQUIRE(___2039()); ___3931::___1391 fileLoc = m_ioStream.fileLoc(); MPI_Offset fileSize; if (MPI_File_get_size(m_ioStream.fileHandle(), &fileSize) == MPI_SUCCESS) return fileLoc < static_cast<___3931::___1391>(fileSize) ? 0 : -1;
return -1; } int MPIFileReader::getc() { unsigned char c; MPI_Status status; if (MPI_File_read(m_ioStream.fileHandle(), &c, 1, MPI_CHAR, &status) == MPI_SUCCESS) return c; return EOF; } int MPIFileReader::ungetc(int  ) { ___476(___1303); return EOF; } int MPIFileReader::fscanf(char const*  , void* /*___3249*/) { ___476(___1303); return EOF; } int MPIFileReader::fscanf(char const*  , void* /*ptr1*/, void* /*ptr2*/) { ___476(___1303); return EOF; } int MPIFileReader::fscanf(char const*  , void* /*ptr1*/, void* /*ptr2*/, void* /*ptr3*/) { ___476(___1303); return EOF; } }}
